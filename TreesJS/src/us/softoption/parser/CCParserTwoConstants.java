/* Generated By:JavaCC: Do not edit this line. CCParserTwoConstants.java */
package us.softoption.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CCParserTwoConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int CONSTANT = 5;
  /** RegularExpression Id. */
  int FUNCTOR = 6;
  /** RegularExpression Id. */
  int VARIABLE = 7;
  /** RegularExpression Id. */
  int PREDICATE = 8;
  /** RegularExpression Id. */
  int INFIXPREDICATE = 9;
  /** RegularExpression Id. */
  int EQUALITY = 10;
  /** RegularExpression Id. */
  int TOPBOTTOM = 11;
  /** RegularExpression Id. */
  int NEGATION = 12;
  /** RegularExpression Id. */
  int MODALPOSSIBLE = 13;
  /** RegularExpression Id. */
  int MODALNECESSARY = 14;
  /** RegularExpression Id. */
  int MODALKAPPA = 15;
  /** RegularExpression Id. */
  int MODALRHO = 16;
  /** RegularExpression Id. */
  int UNIQUANT = 17;
  /** RegularExpression Id. */
  int EXIQUANT = 18;
  /** RegularExpression Id. */
  int UNIQUE = 19;
  /** RegularExpression Id. */
  int AND = 20;
  /** RegularExpression Id. */
  int OR = 21;
  /** RegularExpression Id. */
  int IMPLIC = 22;
  /** RegularExpression Id. */
  int EQUIV = 23;
  /** RegularExpression Id. */
  int LEFTPAREN = 24;
  /** RegularExpression Id. */
  int RIGHTPAREN = 25;
  /** RegularExpression Id. */
  int LEFTSQUARE = 26;
  /** RegularExpression Id. */
  int RIGHTSQUARE = 27;
  /** RegularExpression Id. */
  int LEFTCURLY = 28;
  /** RegularExpression Id. */
  int RIGHTCURLY = 29;
  /** RegularExpression Id. */
  int SLASH = 30;
  /** RegularExpression Id. */
  int LEFTANGLE = 31;
  /** RegularExpression Id. */
  int RIGHTANGLE = 32;
  /** RegularExpression Id. */
  int COMMA = 33;
  /** RegularExpression Id. */
  int COLON = 34;
  /** RegularExpression Id. */
  int VERTLINE = 35;
  /** RegularExpression Id. */
  int POWERSET = 36;
  /** RegularExpression Id. */
  int SUCCESSOR = 37;
  /** RegularExpression Id. */
  int INFIX2 = 38;
  /** RegularExpression Id. */
  int INFIX3 = 39;
  /** RegularExpression Id. */
  int INFIX4 = 40;
  /** RegularExpression Id. */
  int INFIX5 = 41;
  /** RegularExpression Id. */
  int MEMBEROF = 42;
  /** RegularExpression Id. */
  int SUBSCRIPTS = 43;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<CONSTANT>",
    "<FUNCTOR>",
    "<VARIABLE>",
    "<PREDICATE>",
    "<INFIXPREDICATE>",
    "\"=\"",
    "<TOPBOTTOM>",
    "<NEGATION>",
    "<MODALPOSSIBLE>",
    "<MODALNECESSARY>",
    "<MODALKAPPA>",
    "<MODALRHO>",
    "\"\\u2200\"",
    "\"\\u2203\"",
    "\"\\u2203!\"",
    "<AND>",
    "\"\\u2228\"",
    "<IMPLIC>",
    "<EQUIV>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"/\"",
    "\"<\"",
    "\">\"",
    "\",\"",
    "\":\"",
    "\"|\"",
    "\"\\u2118\"",
    "\"\\\'\"",
    "<INFIX2>",
    "<INFIX3>",
    "\"\\u2229\"",
    "\"\\u222a\"",
    "<MEMBEROF>",
    "<SUBSCRIPTS>",
  };

}
